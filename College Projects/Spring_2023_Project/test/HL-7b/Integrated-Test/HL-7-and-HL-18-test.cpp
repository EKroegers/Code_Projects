///Integrated tests for HL-7 and HL-18
///HL-7 and HL-18 share test file since they share some
///functions and need some of the same data
#include <iostream>
#include <fstream>
#include <string.h>

#include <bits/stdc++.h>

#ifdef _WIN32
        int windows = 1;
#else
        int windows = 0;
#endif

using namespace std;


/// Necessary for HL-7 and HL-18 tests
/// Double stock/market return percentage value passed in
/// is sorted into proper category (ie. -2 to -1%) of passed in array
void sortValue(double stockReturn, double (&resultArray)[]) {
	if (stockReturn <= -12) {
        throw invalid_argument("Generated values must be between -12 and 10");
    } else if (stockReturn <= -11) {
		resultArray[0]++;
	} else if (stockReturn <= -10) {
		resultArray[1]++;
	} else if (stockReturn <= -9) {
		resultArray[2]++;
	} else if (stockReturn <= -8) {
		resultArray[3]++;
	} else if (stockReturn <= -7) {
		resultArray[4]++;
	} else if (stockReturn <= -6) {
		resultArray[5]++;
	} else if (stockReturn <= -5) {
		resultArray[6]++;
	} else if (stockReturn <= -4) {
		resultArray[7]++;
	} else if (stockReturn <= -3) {
		resultArray[8]++;
	} else if (stockReturn <= -2) {
		resultArray[9]++;
	} else if (stockReturn <= -1) {
		resultArray[10]++;
	} else if (stockReturn <= 0) {
		resultArray[11]++;
	} else if (stockReturn <= 1) {
		resultArray[12]++;
	} else if (stockReturn <= 2) {
		resultArray[13]++;
	} else if (stockReturn <= 3) {
		resultArray[14]++;
	} else if (stockReturn <= 4) {
		resultArray[15]++;
	} else if (stockReturn <= 5) {
		resultArray[16]++;
	} else if (stockReturn <= 6) {
		resultArray[17]++;
	} else if (stockReturn <= 7) {
		resultArray[18]++;
	} else if (stockReturn <= 8) {
		resultArray[19]++;
	} else if (stockReturn <= 9) {
		resultArray[20]++;
	} else if (stockReturn <= 10) {
		resultArray[21]++;
	} else {
		throw invalid_argument("Generated values must be between -12 and 10");
	}
}

///HL-18 test
///compare the percentage of returns in a range generated by program to those
///of actual historical returns in each category (ie. percentage of stocks on
///a day that return 1% to 2% in simulation vs historical data)
bool compareStockResultsToHistoricalData(double historicalReturnPercentages[], double simulatedReturnPercentages[], int numberOfCategories) {
	double acceptanceRange = .03;
	bool testPassed = true;
	for (int i = 0; i < numberOfCategories; i++) {
		if (simulatedReturnPercentages[i] >= (historicalReturnPercentages[i] + acceptanceRange) || simulatedReturnPercentages[i] <= (historicalReturnPercentages[i] - acceptanceRange)) {
			testPassed = false;
			cout << "FAILED HL-18 Test: Expected " << historicalReturnPercentages[i] - acceptanceRange << " to " << historicalReturnPercentages[i] + acceptanceRange << " but received " << simulatedReturnPercentages[i] << endl;
		}
	}
    if (testPassed == true) {
        cout << "HL-18 Test Passed. No percentage of stock ranges occurred notably more or less (within 3%) than it does in the historical data" << endl;
    }
	return testPassed;
}

/// HL-7 test
///Test if 80% of simulated market's return fall into the -1% to 3% range
bool compareMarketResultsToHistoricalData(double marketSimulationResults[]) {
	bool testPassed = true;
	// indices [12] [13] [14] [15] contain the count of market days/ticks with returns
	//with -1 to 0%, 0 to 1%, 1 to 2%, and 2 to 3% results respectively.
	double percentInDesiredRange = marketSimulationResults[12] + marketSimulationResults[13] + marketSimulationResults[14] + marketSimulationResults[15];
	if (percentInDesiredRange < .8) {
		testPassed = false;
		cout << "FAILED: Expected 80 percent of daily returns be in the range of -1 percent to 3 percent. Percent in this range was: " << percentInDesiredRange << endl;
	} else {
        cout << "HL-7 Test Passed. >=80\% of market returns are within the -1\% to 3% range." << endl;
    }

	return testPassed;
}

///Necessary to HL-7b and HL-18 tests. Convert number of
///results from absolute number to percentage
void convertToPercentage(double (&arrayOfResults)[], int numberOfCategories, int numberOfInputs) {
	for (int i = 0; i < numberOfCategories; i++) {
		arrayOfResults[i] = arrayOfResults[i]/float(numberOfInputs);
	}
}

///Finds all percentage values in inputFile
///Needs to be passed with & for inputFile
vector<double> findReturnPercentagesInLog(ifstream &inputFile) {
    string input;
    vector<double> returnPercentagesInLog;
    while(inputFile) {
        getline(inputFile, input);
        if (inputFile) {
            istringstream ss(input);
            string word;
            //for each word in each line of log, check if line contains
            //% character (Only percentage values should)
            //Identifies return percentages for comparison
            while (ss >> word) {
                if (word.find('%') != string::npos) {
                    //remove %
                    word.pop_back();
                    //change to string word to double and store
                    returnPercentagesInLog.push_back(stod(word));
                }
            }
        }
    }
    return returnPercentagesInLog;
}


///Test begins here
///main calls unit tests for both HL-7 and HL-18
/// tests check that returns from stock and market fluctuation
/// fall in the appropriate ranges
int main() {
    //HL-7
    int numberOfCategories = 22;
	double historicalReturnPercentages[numberOfCategories] = {0.0004, 0.0, 0.0004, 0.0, 0.0004, 0.0, 0.0004, 0.0016, 0.0048, 0.0139, 0.0429, 0.1973, 0.3045, 0.2044, 0.1108, 0.0572, 0.0294, 0.0151, 0.0079, 0.0040, 0.0020, 0.0016};


    string path;
    if (windows == 1) {
        path = "..\\..\\..\\src\\market-log.txt";
    } else {
        path = "../../../src/market-log.txt";
    }
    ifstream marketInputFile(path);

    if (!marketInputFile) {
        cout << "Test for HL-7 could not open market-log.txt" << endl;
        return 1;
    }

    vector<double> marketReturns = findReturnPercentagesInLog(marketInputFile);
    double marketValuesByCategory[numberOfCategories] = {0.0};

    for (int i = 0; i < marketReturns.size(); i++) {
        sortValue(marketReturns.at(i), marketValuesByCategory);
    }
    convertToPercentage(marketValuesByCategory, numberOfCategories, marketReturns.size());
    bool HL7TestResult = compareMarketResultsToHistoricalData(marketValuesByCategory);

    marketInputFile.close();

    //end of HL-7 test
    //HL-18 test
    if (windows == 1) {
        path = "..\\..\\..\\src\\stock-log.txt";
    } else {
        path = "../../../src/stock-log.txt";
    }
    ifstream stockInputFile(path);

    if (!stockInputFile) {
        cout << "Test for HL-18 could not open stock-log.txt" << endl;
        return 1;
    }

    vector<double> stockReturns = findReturnPercentagesInLog(stockInputFile);
    double stockValuesByCategory[numberOfCategories] = {0.0};

    for (int i = 0; i < stockReturns.size(); i++) {
        sortValue(stockReturns.at(i), stockValuesByCategory);
    }
    convertToPercentage(stockValuesByCategory, numberOfCategories, stockReturns.size());
    bool HL18TestResult = compareStockResultsToHistoricalData(historicalReturnPercentages, stockValuesByCategory, numberOfCategories);

    stockInputFile.close();

    if (HL7TestResult == false || HL18TestResult == false) {
        return 1;
    }

	return 0;
}
